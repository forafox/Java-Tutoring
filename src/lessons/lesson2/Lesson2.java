package lessons.lesson2;

import static lessons.lesson2.OverloadingOrder.f;

public class Lesson2 {

    public void start() {
        /* Конструктор
        Конструктор - метод
        Должен быть у каждого объекта
        За вызов отвечает компилятор
        Инициализирует
        Название конструктора - это название класса с большой буквы.
         */
//        Snake snake = new Snake();
////        №1 пример простого класса с конструктором
        for (int i = 0; i < 5; i++) {
            new Rock();
        }
////        №2 Конструктор может получать аргументы
        for (int i = 0; i < 5; i++) {
            new Rock(i);
        }
//        №3 перезагрузка методов ( не путать с переопределением)
        //Сигнатура метода (название метода + возвращаемое значение + аргументы)
        for (int i = 0; i < 5; i++) {
            Tree t = new Tree(i);
            t.info();
            t.info("Перезагруженный метод");
        }
//        //Перегруженный конструтор
        new Tree().info();
//        №4 Пример с перестановкой порядка аргументов
        //Быстрый комментарий (сtrl+/) (на macOs cmd+/)
        f("Andrey", 5);
        f(5, "Andrey");
        /*
        №5
         Ключевое слово this
         */
        Banana a = new Banana();
        Banana b = new Banana();
        a.peel(1); // равносильно такой записи Banana.peel(a,1)
//        //Практически все методы имеют дополнительный !внутренний! аргумент
        b.peel(2);

        Leaf leaf = new Leaf();
        leaf.increment().increment().increment().increment().printI();
        /*
        №6 Вызов конструктора
        Повторное использование this() в конструкторе вызывает другой конструктор.
        Нельзя использовать более одного раза
        нужно применять первой строчкой в конструкторе
         */

        Flower x = new Flower();
        x.printValues();
    }
}
